
00_LED_On_Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  000005f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2000042c  00000a1c  0002042c  2**2
                  ALLOC
  3 .stack        00002004  2000046c  00000a5c  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000825e  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  0002870b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f8  00000000  00000000  00028dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000090  00000000  00000000  00028ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00028f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011d66  00000000  00000000  00028f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001c55  00000000  00000000  0003acea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000723d7  00000000  00000000  0003c93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000290  00000000  00000000  000aed18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 24 00 20 95 02 00 00 91 02 00 00 91 02 00 00     p$. ............
	...
  2c:	91 02 00 00 00 00 00 00 00 00 00 00 91 02 00 00     ................
  3c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  4c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  5c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  6c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  7c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  8c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  9c:	91 02 00 00 91 02 00 00 91 02 00 00 91 02 00 00     ................
  ac:	91 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000042c 	.word	0x2000042c
  d4:	00000000 	.word	0x00000000
  d8:	000005f0 	.word	0x000005f0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000430 	.word	0x20000430
 108:	000005f0 	.word	0x000005f0
 10c:	000005f0 	.word	0x000005f0
 110:	00000000 	.word	0x00000000

00000114 <AppInit>:
//////////////////////////////////////////////////////////////////////////
#include "app.h"
#include "clock.h"

void AppInit(void)
{
 114:	b570      	push	{r4, r5, r6, lr}
	ClocksInit();
 116:	4b18      	ldr	r3, [pc, #96]	; (178 <AppInit+0x64>)
 118:	4798      	blx	r3
	
	// Assign LED0 as OUTPUT
	REG_PORT_DIR0 = LED0_PIN_MASK;
 11a:	4b18      	ldr	r3, [pc, #96]	; (17c <AppInit+0x68>)
 11c:	2080      	movs	r0, #128	; 0x80
 11e:	0280      	lsls	r0, r0, #10
 120:	6018      	str	r0, [r3, #0]
	REG_PORT_DIR0 |= PORT_PA20;
 122:	6819      	ldr	r1, [r3, #0]
 124:	2280      	movs	r2, #128	; 0x80
 126:	0352      	lsls	r2, r2, #13
 128:	4311      	orrs	r1, r2
 12a:	6019      	str	r1, [r3, #0]
	// Set LED0 OFF
	REG_PORT_OUTCLR0 = LED0_PIN_MASK;
 12c:	4914      	ldr	r1, [pc, #80]	; (180 <AppInit+0x6c>)
 12e:	6008      	str	r0, [r1, #0]
	REG_PORT_OUTCLR0 |= PORT_PA20;
 130:	6808      	ldr	r0, [r1, #0]
 132:	4302      	orrs	r2, r0
 134:	600a      	str	r2, [r1, #0]
	//PORT->Group[0].PMUX[2].bit.PMUXO = 0x4;
	
	//PORT->Group[0].PINCFG[6].bit.PMUXEN = 1; // for tcc1 wo[0] at e
	//PORT->Group[0].PMUX[3].bit.PMUXE = 0x4;
	
	PORT->Group[0].PINCFG[9].bit.PMUXEN = 1; // for tcc0 wo[1] at e
 136:	2149      	movs	r1, #73	; 0x49
 138:	5c5a      	ldrb	r2, [r3, r1]
 13a:	2001      	movs	r0, #1
 13c:	4302      	orrs	r2, r0
 13e:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[4].bit.PMUXO = 0x4;
 140:	3915      	subs	r1, #21
 142:	5c5d      	ldrb	r5, [r3, r1]
 144:	240f      	movs	r4, #15
 146:	220f      	movs	r2, #15
 148:	402a      	ands	r2, r5
 14a:	2540      	movs	r5, #64	; 0x40
 14c:	432a      	orrs	r2, r5
 14e:	545a      	strb	r2, [r3, r1]
	
	//PORT->Group[0].PINCFG[9].bit.PMUXEN = 1; // for tcc1 wo[3] at f
	//PORT->Group[0].PMUX[4].bit.PMUXO = 0x5;
	
	PORT->Group[1].PINCFG[10].bit.PMUXEN = 1; // for tcc0 wo[4] at f 
 150:	3196      	adds	r1, #150	; 0x96
 152:	5c5a      	ldrb	r2, [r3, r1]
 154:	4302      	orrs	r2, r0
 156:	545a      	strb	r2, [r3, r1]
	PORT->Group[1].PMUX[5].bit.PMUXE = 0x5;
 158:	22b5      	movs	r2, #181	; 0xb5
 15a:	5c99      	ldrb	r1, [r3, r2]
 15c:	43a1      	bics	r1, r4
 15e:	2505      	movs	r5, #5
 160:	4329      	orrs	r1, r5
 162:	5499      	strb	r1, [r3, r2]
	
	PORT->Group[0].PINCFG[10].bit.PMUXEN = 1; // for tcc0 wo[4] at f 
 164:	3a6b      	subs	r2, #107	; 0x6b
 166:	5c99      	ldrb	r1, [r3, r2]
 168:	4301      	orrs	r1, r0
 16a:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[5].bit.PMUXE = 0x5;
 16c:	2135      	movs	r1, #53	; 0x35
 16e:	5c5a      	ldrb	r2, [r3, r1]
 170:	43a2      	bics	r2, r4
 172:	432a      	orrs	r2, r5
 174:	545a      	strb	r2, [r3, r1]
	
} // AppInit()
 176:	bd70      	pop	{r4, r5, r6, pc}
 178:	00000185 	.word	0x00000185
 17c:	41004400 	.word	0x41004400
 180:	41004414 	.word	0x41004414

00000184 <ClocksInit>:
//////////////////////////////////////////////////////////////////////////
#include "clock.h"

void ClocksInit(void)
{
	PM->APBCMASK.reg |= (PM_APBCMASK_TCC1 | PM_APBCMASK_TCC0); 
 184:	4a34      	ldr	r2, [pc, #208]	; (258 <ClocksInit+0xd4>)
 186:	6a11      	ldr	r1, [r2, #32]
 188:	23c0      	movs	r3, #192	; 0xc0
 18a:	009b      	lsls	r3, r3, #2
 18c:	430b      	orrs	r3, r1
 18e:	6213      	str	r3, [r2, #32]
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GCLK2 is SET TO 8MHZ
	
	SYSCTRL->OSC8M.bit.PRESC = 0x00;  // divide by 1
 190:	4b32      	ldr	r3, [pc, #200]	; (25c <ClocksInit+0xd8>)
 192:	6a1a      	ldr	r2, [r3, #32]
 194:	4932      	ldr	r1, [pc, #200]	; (260 <ClocksInit+0xdc>)
 196:	400a      	ands	r2, r1
 198:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ENABLE = 1;
 19a:	6a1a      	ldr	r2, [r3, #32]
 19c:	2102      	movs	r1, #2
 19e:	430a      	orrs	r2, r1
 1a0:	621a      	str	r2, [r3, #32]
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
 1a2:	4a30      	ldr	r2, [pc, #192]	; (264 <ClocksInit+0xe0>)
 1a4:	3101      	adds	r1, #1
 1a6:	31ff      	adds	r1, #255	; 0xff
 1a8:	6091      	str	r1, [r2, #8]
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) | GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_OE | GCLK_GENCTRL_GENEN;
 1aa:	492f      	ldr	r1, [pc, #188]	; (268 <ClocksInit+0xe4>)
 1ac:	6051      	str	r1, [r2, #4]
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GCLK1 is SET TO 32KHZ

	SYSCTRL->XOSC32K.reg =
 1ae:	4a2f      	ldr	r2, [pc, #188]	; (26c <ClocksInit+0xe8>)
 1b0:	829a      	strh	r2, [r3, #20]
    SYSCTRL_XOSC32K_STARTUP(0x7) |
    SYSCTRL_XOSC32K_EN32K |
    SYSCTRL_XOSC32K_XTALEN;

	/* This has to be a separate write as per datasheet section 17.6.3 */
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
 1b2:	8a9a      	ldrh	r2, [r3, #20]
 1b4:	2102      	movs	r1, #2
 1b6:	430a      	orrs	r2, r1
 1b8:	829a      	strh	r2, [r3, #20]

	/* Wait for the external crystal to be ready */
	while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
 1ba:	001a      	movs	r2, r3
 1bc:	68d3      	ldr	r3, [r2, #12]
 1be:	079b      	lsls	r3, r3, #30
 1c0:	d5fc      	bpl.n	1bc <ClocksInit+0x38>
	
	GCLK->GENDIV.reg =
 1c2:	4b28      	ldr	r3, [pc, #160]	; (264 <ClocksInit+0xe0>)
 1c4:	2202      	movs	r2, #2
 1c6:	32ff      	adds	r2, #255	; 0xff
 1c8:	609a      	str	r2, [r3, #8]
	GCLK_GENDIV_ID(1) |
	GCLK_GENDIV_DIV(1);

	/* Setup GCLK1 using the external 32.768 kHz oscillator */
	GCLK->GENCTRL.reg =
 1ca:	4a29      	ldr	r2, [pc, #164]	; (270 <ClocksInit+0xec>)
 1cc:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_OE |
	/* Improve the duty cycle. */
	GCLK_GENCTRL_IDC |
	GCLK_GENCTRL_GENEN;
	/* Wait for the write to complete */
	while(GCLK->STATUS.bit.SYNCBUSY);
 1ce:	001a      	movs	r2, r3
 1d0:	7853      	ldrb	r3, [r2, #1]
 1d2:	09db      	lsrs	r3, r3, #7
 1d4:	d1fc      	bne.n	1d0 <ClocksInit+0x4c>
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GCLK0 is SET TO 48MHZ
	
	NVMCTRL->CTRLB.bit.RWS = 1; /* Set the correct number of wait states for 48 MHz @ 3.3v */
 1d6:	4a27      	ldr	r2, [pc, #156]	; (274 <ClocksInit+0xf0>)
 1d8:	6853      	ldr	r3, [r2, #4]
 1da:	211e      	movs	r1, #30
 1dc:	438b      	bics	r3, r1
 1de:	391c      	subs	r1, #28
 1e0:	430b      	orrs	r3, r1
 1e2:	6053      	str	r3, [r2, #4]
	GCLK->CLKCTRL.reg =
 1e4:	2282      	movs	r2, #130	; 0x82
 1e6:	01d2      	lsls	r2, r2, #7
 1e8:	4b1e      	ldr	r3, [pc, #120]	; (264 <ClocksInit+0xe0>)
 1ea:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN;
	
	/* This works around a quirk in the hardware (errata 1.2.1) -
    the DFLLCTRL register must be manually reset to this value before
    configuration. */
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1ec:	4a1b      	ldr	r2, [pc, #108]	; (25c <ClocksInit+0xd8>)
 1ee:	68d3      	ldr	r3, [r2, #12]
 1f0:	06db      	lsls	r3, r3, #27
 1f2:	d5fc      	bpl.n	1ee <ClocksInit+0x6a>
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 1f4:	2202      	movs	r2, #2
 1f6:	4b19      	ldr	r3, [pc, #100]	; (25c <ClocksInit+0xd8>)
 1f8:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 1fa:	001a      	movs	r2, r3
 1fc:	68d3      	ldr	r3, [r2, #12]
 1fe:	06db      	lsls	r3, r3, #27
 200:	d5fc      	bpl.n	1fc <ClocksInit+0x78>

	/* Set up the multiplier. This tells the DFLL to multiply the 32.768 kHz
    reference clock to 48 MHz */
	SYSCTRL->DFLLMUL.reg =
 202:	4a1d      	ldr	r2, [pc, #116]	; (278 <ClocksInit+0xf4>)
 204:	4b15      	ldr	r3, [pc, #84]	; (25c <ClocksInit+0xd8>)
 206:	62da      	str	r2, [r3, #44]	; 0x2c
       faster locking. */
    SYSCTRL_DFLLMUL_FSTEP(511) | // max value: 1023
    SYSCTRL_DFLLMUL_CSTEP(31);  // max value: 63

	/* Wait for the write to finish */
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 208:	001a      	movs	r2, r3
 20a:	68d3      	ldr	r3, [r2, #12]
 20c:	06db      	lsls	r3, r3, #27
 20e:	d5fc      	bpl.n	20a <ClocksInit+0x86>
	
	uint32_t coarse = (*((uint32_t *)FUSES_DFLL48M_COARSE_CAL_ADDR) & FUSES_DFLL48M_COARSE_CAL_Msk) >> FUSES_DFLL48M_COARSE_CAL_Pos;
 210:	4b1a      	ldr	r3, [pc, #104]	; (27c <ClocksInit+0xf8>)
 212:	681a      	ldr	r2, [r3, #0]
	SYSCTRL->DFLLVAL.bit.COARSE = coarse;
 214:	4911      	ldr	r1, [pc, #68]	; (25c <ClocksInit+0xd8>)
 216:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 218:	0e92      	lsrs	r2, r2, #26
 21a:	0292      	lsls	r2, r2, #10
 21c:	4818      	ldr	r0, [pc, #96]	; (280 <ClocksInit+0xfc>)
 21e:	4003      	ands	r3, r0
 220:	4313      	orrs	r3, r2
 222:	628b      	str	r3, [r1, #40]	; 0x28

	/* Wait for the write to finish */
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
 224:	000a      	movs	r2, r1
 226:	68d3      	ldr	r3, [r2, #12]
 228:	06db      	lsls	r3, r3, #27
 22a:	d5fc      	bpl.n	226 <ClocksInit+0xa2>
	SYSCTRL->DFLLCTRL.reg |=
 22c:	4a0b      	ldr	r2, [pc, #44]	; (25c <ClocksInit+0xd8>)
 22e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 230:	4914      	ldr	r1, [pc, #80]	; (284 <ClocksInit+0x100>)
 232:	430b      	orrs	r3, r1
 234:	8493      	strh	r3, [r2, #36]	; 0x24
	/* Wait for the frequency to be locked before outputting the clock */
	SYSCTRL_DFLLCTRL_WAITLOCK |
	/* Enable it */
	SYSCTRL_DFLLCTRL_ENABLE;
	/* Wait for the frequency to lock */
	while (!SYSCTRL->PCLKSR.bit.DFLLLCKC || !SYSCTRL->PCLKSR.bit.DFLLLCKF) {}
 236:	68d3      	ldr	r3, [r2, #12]
 238:	061b      	lsls	r3, r3, #24
 23a:	d5fc      	bpl.n	236 <ClocksInit+0xb2>
 23c:	68d3      	ldr	r3, [r2, #12]
 23e:	065b      	lsls	r3, r3, #25
 240:	d5f9      	bpl.n	236 <ClocksInit+0xb2>
		
	/* Setup GCLK0 using the DFLL @ 48 MHz */
	GCLK->GENCTRL.reg =
 242:	4a11      	ldr	r2, [pc, #68]	; (288 <ClocksInit+0x104>)
 244:	4b07      	ldr	r3, [pc, #28]	; (264 <ClocksInit+0xe0>)
 246:	605a      	str	r2, [r3, #4]
	/* Improve the duty cycle. */
	GCLK_GENCTRL_IDC |
	GCLK_GENCTRL_GENEN;

	/* Wait for the write to complete */
	while(GCLK->STATUS.bit.SYNCBUSY);	
 248:	001a      	movs	r2, r3
 24a:	7853      	ldrb	r3, [r2, #1]
 24c:	09db      	lsrs	r3, r3, #7
 24e:	d1fc      	bne.n	24a <ClocksInit+0xc6>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TCC0_TCC1;
 250:	4a0e      	ldr	r2, [pc, #56]	; (28c <ClocksInit+0x108>)
 252:	4b04      	ldr	r3, [pc, #16]	; (264 <ClocksInit+0xe0>)
 254:	805a      	strh	r2, [r3, #2]
} 
 256:	4770      	bx	lr
 258:	40000400 	.word	0x40000400
 25c:	40000800 	.word	0x40000800
 260:	fffffcff 	.word	0xfffffcff
 264:	40000c00 	.word	0x40000c00
 268:	00090602 	.word	0x00090602
 26c:	0000070c 	.word	0x0000070c
 270:	000b0501 	.word	0x000b0501
 274:	41004000 	.word	0x41004000
 278:	7dff05b9 	.word	0x7dff05b9
 27c:	00806024 	.word	0x00806024
 280:	ffff03ff 	.word	0xffff03ff
 284:	00000806 	.word	0x00000806
 288:	000b0700 	.word	0x000b0700
 28c:	0000401a 	.word	0x0000401a

00000290 <Dummy_Handler>:
 290:	e7fe      	b.n	290 <Dummy_Handler>
	...

00000294 <Reset_Handler>:
 294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 296:	4a2a      	ldr	r2, [pc, #168]	; (340 <Reset_Handler+0xac>)
 298:	4b2a      	ldr	r3, [pc, #168]	; (344 <Reset_Handler+0xb0>)
 29a:	429a      	cmp	r2, r3
 29c:	d011      	beq.n	2c2 <Reset_Handler+0x2e>
 29e:	001a      	movs	r2, r3
 2a0:	4b29      	ldr	r3, [pc, #164]	; (348 <Reset_Handler+0xb4>)
 2a2:	429a      	cmp	r2, r3
 2a4:	d20d      	bcs.n	2c2 <Reset_Handler+0x2e>
 2a6:	4a29      	ldr	r2, [pc, #164]	; (34c <Reset_Handler+0xb8>)
 2a8:	3303      	adds	r3, #3
 2aa:	1a9b      	subs	r3, r3, r2
 2ac:	089b      	lsrs	r3, r3, #2
 2ae:	3301      	adds	r3, #1
 2b0:	009b      	lsls	r3, r3, #2
 2b2:	2200      	movs	r2, #0
 2b4:	4823      	ldr	r0, [pc, #140]	; (344 <Reset_Handler+0xb0>)
 2b6:	4922      	ldr	r1, [pc, #136]	; (340 <Reset_Handler+0xac>)
 2b8:	588c      	ldr	r4, [r1, r2]
 2ba:	5084      	str	r4, [r0, r2]
 2bc:	3204      	adds	r2, #4
 2be:	429a      	cmp	r2, r3
 2c0:	d1fa      	bne.n	2b8 <Reset_Handler+0x24>
 2c2:	4a23      	ldr	r2, [pc, #140]	; (350 <Reset_Handler+0xbc>)
 2c4:	4b23      	ldr	r3, [pc, #140]	; (354 <Reset_Handler+0xc0>)
 2c6:	429a      	cmp	r2, r3
 2c8:	d20a      	bcs.n	2e0 <Reset_Handler+0x4c>
 2ca:	43d3      	mvns	r3, r2
 2cc:	4921      	ldr	r1, [pc, #132]	; (354 <Reset_Handler+0xc0>)
 2ce:	185b      	adds	r3, r3, r1
 2d0:	2103      	movs	r1, #3
 2d2:	438b      	bics	r3, r1
 2d4:	3304      	adds	r3, #4
 2d6:	189b      	adds	r3, r3, r2
 2d8:	2100      	movs	r1, #0
 2da:	c202      	stmia	r2!, {r1}
 2dc:	4293      	cmp	r3, r2
 2de:	d1fc      	bne.n	2da <Reset_Handler+0x46>
 2e0:	4a1d      	ldr	r2, [pc, #116]	; (358 <Reset_Handler+0xc4>)
 2e2:	21ff      	movs	r1, #255	; 0xff
 2e4:	4b1d      	ldr	r3, [pc, #116]	; (35c <Reset_Handler+0xc8>)
 2e6:	438b      	bics	r3, r1
 2e8:	6093      	str	r3, [r2, #8]
 2ea:	39fd      	subs	r1, #253	; 0xfd
 2ec:	2390      	movs	r3, #144	; 0x90
 2ee:	005b      	lsls	r3, r3, #1
 2f0:	4a1b      	ldr	r2, [pc, #108]	; (360 <Reset_Handler+0xcc>)
 2f2:	50d1      	str	r1, [r2, r3]
 2f4:	4a1b      	ldr	r2, [pc, #108]	; (364 <Reset_Handler+0xd0>)
 2f6:	78d3      	ldrb	r3, [r2, #3]
 2f8:	2503      	movs	r5, #3
 2fa:	43ab      	bics	r3, r5
 2fc:	2402      	movs	r4, #2
 2fe:	4323      	orrs	r3, r4
 300:	70d3      	strb	r3, [r2, #3]
 302:	78d3      	ldrb	r3, [r2, #3]
 304:	270c      	movs	r7, #12
 306:	43bb      	bics	r3, r7
 308:	2608      	movs	r6, #8
 30a:	4333      	orrs	r3, r6
 30c:	70d3      	strb	r3, [r2, #3]
 30e:	4b16      	ldr	r3, [pc, #88]	; (368 <Reset_Handler+0xd4>)
 310:	7b98      	ldrb	r0, [r3, #14]
 312:	2230      	movs	r2, #48	; 0x30
 314:	4390      	bics	r0, r2
 316:	2220      	movs	r2, #32
 318:	4310      	orrs	r0, r2
 31a:	7398      	strb	r0, [r3, #14]
 31c:	7b99      	ldrb	r1, [r3, #14]
 31e:	43b9      	bics	r1, r7
 320:	4331      	orrs	r1, r6
 322:	7399      	strb	r1, [r3, #14]
 324:	7b9a      	ldrb	r2, [r3, #14]
 326:	43aa      	bics	r2, r5
 328:	4322      	orrs	r2, r4
 32a:	739a      	strb	r2, [r3, #14]
 32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0xd8>)
 32e:	6853      	ldr	r3, [r2, #4]
 330:	2180      	movs	r1, #128	; 0x80
 332:	430b      	orrs	r3, r1
 334:	6053      	str	r3, [r2, #4]
 336:	4b0e      	ldr	r3, [pc, #56]	; (370 <Reset_Handler+0xdc>)
 338:	4798      	blx	r3
 33a:	4b0e      	ldr	r3, [pc, #56]	; (374 <Reset_Handler+0xe0>)
 33c:	4798      	blx	r3
 33e:	e7fe      	b.n	33e <Reset_Handler+0xaa>
 340:	000005f0 	.word	0x000005f0
 344:	20000000 	.word	0x20000000
 348:	2000042c 	.word	0x2000042c
 34c:	20000004 	.word	0x20000004
 350:	2000042c 	.word	0x2000042c
 354:	2000046c 	.word	0x2000046c
 358:	e000ed00 	.word	0xe000ed00
 35c:	00000000 	.word	0x00000000
 360:	41007000 	.word	0x41007000
 364:	41005000 	.word	0x41005000
 368:	41004800 	.word	0x41004800
 36c:	41004000 	.word	0x41004000
 370:	00000429 	.word	0x00000429
 374:	00000379 	.word	0x00000379

00000378 <main>:
// Function Prototypes
//////////////////////////////////////////////////////////////////////////
void ClocksInit(void);	// Configure Clock, Wait States and synch, bus clocks for 48MHz operation

int main(void)
{
 378:	b510      	push	{r4, lr}
	// CMSIS compliant function not used
	//SystemInit();

	// Application hardware and software initialization 
	AppInit();
 37a:	4b23      	ldr	r3, [pc, #140]	; (408 <main+0x90>)
 37c:	4798      	blx	r3
	TCC0->PER.bit.PER = 65536 - 1;
	TCC0->CC[1].bit.CC = 16384 - 1;
	TCC0->CTRLA.bit.ENABLE = 1;
	*/
	// for pb10
	TCC0->CTRLA.bit.ENABLE = 0;
 37e:	4b23      	ldr	r3, [pc, #140]	; (40c <main+0x94>)
 380:	681a      	ldr	r2, [r3, #0]
 382:	2102      	movs	r1, #2
 384:	438a      	bics	r2, r1
 386:	601a      	str	r2, [r3, #0]
	TCC0->CTRLA.bit.PRESCSYNC = 0x1;
 388:	681a      	ldr	r2, [r3, #0]
 38a:	4821      	ldr	r0, [pc, #132]	; (410 <main+0x98>)
 38c:	4010      	ands	r0, r2
 38e:	2280      	movs	r2, #128	; 0x80
 390:	0152      	lsls	r2, r2, #5
 392:	4302      	orrs	r2, r0
 394:	601a      	str	r2, [r3, #0]
	TCC0->CTRLA.bit.PRESCALER = 0x1;
 396:	681a      	ldr	r2, [r3, #0]
 398:	481e      	ldr	r0, [pc, #120]	; (414 <main+0x9c>)
 39a:	4010      	ands	r0, r2
 39c:	2280      	movs	r2, #128	; 0x80
 39e:	0052      	lsls	r2, r2, #1
 3a0:	4302      	orrs	r2, r0
 3a2:	601a      	str	r2, [r3, #0]
	TCC0->WAVE.bit.WAVEGEN = 0x2;
 3a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 3a6:	2007      	movs	r0, #7
 3a8:	4382      	bics	r2, r0
 3aa:	430a      	orrs	r2, r1
 3ac:	63da      	str	r2, [r3, #60]	; 0x3c
	TCC0->WAVE.bit.POL0 = 0;
 3ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 3b0:	4819      	ldr	r0, [pc, #100]	; (418 <main+0xa0>)
 3b2:	4002      	ands	r2, r0
 3b4:	63da      	str	r2, [r3, #60]	; 0x3c
	TCC0->CTRLBSET.bit.LUPD = 0;
 3b6:	795a      	ldrb	r2, [r3, #5]
 3b8:	438a      	bics	r2, r1
 3ba:	715a      	strb	r2, [r3, #5]
	//TCC0->WAVE.bit.CICCEN0 = 1;
	//TCC0->WAVE.bit.CIPEREN = 1;
	TCC0->PER.bit.PER = 65536 - 1;
 3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 3be:	0e12      	lsrs	r2, r2, #24
 3c0:	0612      	lsls	r2, r2, #24
 3c2:	4916      	ldr	r1, [pc, #88]	; (41c <main+0xa4>)
 3c4:	430a      	orrs	r2, r1
 3c6:	641a      	str	r2, [r3, #64]	; 0x40
	TCC0->PERB.bit.PERB = 32768 - 1;
 3c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 3ca:	0e12      	lsrs	r2, r2, #24
 3cc:	0612      	lsls	r2, r2, #24
 3ce:	4914      	ldr	r1, [pc, #80]	; (420 <main+0xa8>)
 3d0:	430a      	orrs	r2, r1
 3d2:	66da      	str	r2, [r3, #108]	; 0x6c
	while(!(TCC0->STATUS.bit.PERBV)){}
 3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 3d6:	0612      	lsls	r2, r2, #24
 3d8:	d5fc      	bpl.n	3d4 <main+0x5c>
	TCC0->CC[0].bit.CC = 16384 - 1;
 3da:	4a0c      	ldr	r2, [pc, #48]	; (40c <main+0x94>)
 3dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 3de:	0e1b      	lsrs	r3, r3, #24
 3e0:	061b      	lsls	r3, r3, #24
 3e2:	4910      	ldr	r1, [pc, #64]	; (424 <main+0xac>)
 3e4:	430b      	orrs	r3, r1
 3e6:	6453      	str	r3, [r2, #68]	; 0x44
	TCC0->CCB[0].bit.CCB = 16384 - 1;
 3e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 3ea:	0e1b      	lsrs	r3, r3, #24
 3ec:	061b      	lsls	r3, r3, #24
 3ee:	430b      	orrs	r3, r1
 3f0:	6713      	str	r3, [r2, #112]	; 0x70
	while(!(TCC0->STATUS.bit.CCBV0)){}
 3f2:	0013      	movs	r3, r2
 3f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 3f6:	03d2      	lsls	r2, r2, #15
 3f8:	d5fc      	bpl.n	3f4 <main+0x7c>
	TCC0->CTRLA.bit.ENABLE = 1; 
 3fa:	4a04      	ldr	r2, [pc, #16]	; (40c <main+0x94>)
 3fc:	6813      	ldr	r3, [r2, #0]
 3fe:	2102      	movs	r1, #2
 400:	430b      	orrs	r3, r1
 402:	6013      	str	r3, [r2, #0]
 404:	e7fe      	b.n	404 <main+0x8c>
 406:	46c0      	nop			; (mov r8, r8)
 408:	00000115 	.word	0x00000115
 40c:	42002000 	.word	0x42002000
 410:	ffffcfff 	.word	0xffffcfff
 414:	fffff8ff 	.word	0xfffff8ff
 418:	fffeffff 	.word	0xfffeffff
 41c:	0000ffff 	.word	0x0000ffff
 420:	00007fff 	.word	0x00007fff
 424:	00003fff 	.word	0x00003fff

00000428 <__libc_init_array>:
 428:	b570      	push	{r4, r5, r6, lr}
 42a:	4e0d      	ldr	r6, [pc, #52]	; (460 <__libc_init_array+0x38>)
 42c:	4d0d      	ldr	r5, [pc, #52]	; (464 <__libc_init_array+0x3c>)
 42e:	2400      	movs	r4, #0
 430:	1bad      	subs	r5, r5, r6
 432:	10ad      	asrs	r5, r5, #2
 434:	d005      	beq.n	442 <__libc_init_array+0x1a>
 436:	00a3      	lsls	r3, r4, #2
 438:	58f3      	ldr	r3, [r6, r3]
 43a:	3401      	adds	r4, #1
 43c:	4798      	blx	r3
 43e:	42a5      	cmp	r5, r4
 440:	d1f9      	bne.n	436 <__libc_init_array+0xe>
 442:	f000 f8c3 	bl	5cc <_init>
 446:	4e08      	ldr	r6, [pc, #32]	; (468 <__libc_init_array+0x40>)
 448:	4d08      	ldr	r5, [pc, #32]	; (46c <__libc_init_array+0x44>)
 44a:	2400      	movs	r4, #0
 44c:	1bad      	subs	r5, r5, r6
 44e:	10ad      	asrs	r5, r5, #2
 450:	d005      	beq.n	45e <__libc_init_array+0x36>
 452:	00a3      	lsls	r3, r4, #2
 454:	58f3      	ldr	r3, [r6, r3]
 456:	3401      	adds	r4, #1
 458:	4798      	blx	r3
 45a:	42a5      	cmp	r5, r4
 45c:	d1f9      	bne.n	452 <__libc_init_array+0x2a>
 45e:	bd70      	pop	{r4, r5, r6, pc}
 460:	000005d8 	.word	0x000005d8
 464:	000005d8 	.word	0x000005d8
 468:	000005d8 	.word	0x000005d8
 46c:	000005e0 	.word	0x000005e0

00000470 <register_fini>:
 470:	4b03      	ldr	r3, [pc, #12]	; (480 <register_fini+0x10>)
 472:	b510      	push	{r4, lr}
 474:	2b00      	cmp	r3, #0
 476:	d002      	beq.n	47e <register_fini+0xe>
 478:	4802      	ldr	r0, [pc, #8]	; (484 <register_fini+0x14>)
 47a:	f000 f805 	bl	488 <atexit>
 47e:	bd10      	pop	{r4, pc}
 480:	00000000 	.word	0x00000000
 484:	00000499 	.word	0x00000499

00000488 <atexit>:
 488:	b510      	push	{r4, lr}
 48a:	0001      	movs	r1, r0
 48c:	2300      	movs	r3, #0
 48e:	2200      	movs	r2, #0
 490:	2000      	movs	r0, #0
 492:	f000 f81f 	bl	4d4 <__register_exitproc>
 496:	bd10      	pop	{r4, pc}

00000498 <__libc_fini_array>:
 498:	b570      	push	{r4, r5, r6, lr}
 49a:	4b09      	ldr	r3, [pc, #36]	; (4c0 <__libc_fini_array+0x28>)
 49c:	4c09      	ldr	r4, [pc, #36]	; (4c4 <__libc_fini_array+0x2c>)
 49e:	1ae4      	subs	r4, r4, r3
 4a0:	10a4      	asrs	r4, r4, #2
 4a2:	d009      	beq.n	4b8 <__libc_fini_array+0x20>
 4a4:	4a08      	ldr	r2, [pc, #32]	; (4c8 <__libc_fini_array+0x30>)
 4a6:	18a5      	adds	r5, r4, r2
 4a8:	00ad      	lsls	r5, r5, #2
 4aa:	18ed      	adds	r5, r5, r3
 4ac:	682b      	ldr	r3, [r5, #0]
 4ae:	3c01      	subs	r4, #1
 4b0:	4798      	blx	r3
 4b2:	3d04      	subs	r5, #4
 4b4:	2c00      	cmp	r4, #0
 4b6:	d1f9      	bne.n	4ac <__libc_fini_array+0x14>
 4b8:	f000 f892 	bl	5e0 <_fini>
 4bc:	bd70      	pop	{r4, r5, r6, pc}
 4be:	46c0      	nop			; (mov r8, r8)
 4c0:	000005ec 	.word	0x000005ec
 4c4:	000005f0 	.word	0x000005f0
 4c8:	3fffffff 	.word	0x3fffffff

000004cc <__retarget_lock_acquire_recursive>:
 4cc:	4770      	bx	lr
 4ce:	46c0      	nop			; (mov r8, r8)

000004d0 <__retarget_lock_release_recursive>:
 4d0:	4770      	bx	lr
 4d2:	46c0      	nop			; (mov r8, r8)

000004d4 <__register_exitproc>:
 4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 4d6:	464e      	mov	r6, r9
 4d8:	4645      	mov	r5, r8
 4da:	46de      	mov	lr, fp
 4dc:	4657      	mov	r7, sl
 4de:	b5e0      	push	{r5, r6, r7, lr}
 4e0:	4d36      	ldr	r5, [pc, #216]	; (5bc <__register_exitproc+0xe8>)
 4e2:	b083      	sub	sp, #12
 4e4:	0006      	movs	r6, r0
 4e6:	6828      	ldr	r0, [r5, #0]
 4e8:	4698      	mov	r8, r3
 4ea:	000f      	movs	r7, r1
 4ec:	4691      	mov	r9, r2
 4ee:	f7ff ffed 	bl	4cc <__retarget_lock_acquire_recursive>
 4f2:	4b33      	ldr	r3, [pc, #204]	; (5c0 <__register_exitproc+0xec>)
 4f4:	681c      	ldr	r4, [r3, #0]
 4f6:	23a4      	movs	r3, #164	; 0xa4
 4f8:	005b      	lsls	r3, r3, #1
 4fa:	58e0      	ldr	r0, [r4, r3]
 4fc:	2800      	cmp	r0, #0
 4fe:	d052      	beq.n	5a6 <__register_exitproc+0xd2>
 500:	6843      	ldr	r3, [r0, #4]
 502:	2b1f      	cmp	r3, #31
 504:	dc13      	bgt.n	52e <__register_exitproc+0x5a>
 506:	1c5a      	adds	r2, r3, #1
 508:	9201      	str	r2, [sp, #4]
 50a:	2e00      	cmp	r6, #0
 50c:	d128      	bne.n	560 <__register_exitproc+0x8c>
 50e:	9a01      	ldr	r2, [sp, #4]
 510:	3302      	adds	r3, #2
 512:	009b      	lsls	r3, r3, #2
 514:	6042      	str	r2, [r0, #4]
 516:	501f      	str	r7, [r3, r0]
 518:	6828      	ldr	r0, [r5, #0]
 51a:	f7ff ffd9 	bl	4d0 <__retarget_lock_release_recursive>
 51e:	2000      	movs	r0, #0
 520:	b003      	add	sp, #12
 522:	bc3c      	pop	{r2, r3, r4, r5}
 524:	4690      	mov	r8, r2
 526:	4699      	mov	r9, r3
 528:	46a2      	mov	sl, r4
 52a:	46ab      	mov	fp, r5
 52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 52e:	4b25      	ldr	r3, [pc, #148]	; (5c4 <__register_exitproc+0xf0>)
 530:	2b00      	cmp	r3, #0
 532:	d03d      	beq.n	5b0 <__register_exitproc+0xdc>
 534:	20c8      	movs	r0, #200	; 0xc8
 536:	0040      	lsls	r0, r0, #1
 538:	e000      	b.n	53c <__register_exitproc+0x68>
 53a:	bf00      	nop
 53c:	2800      	cmp	r0, #0
 53e:	d037      	beq.n	5b0 <__register_exitproc+0xdc>
 540:	22a4      	movs	r2, #164	; 0xa4
 542:	2300      	movs	r3, #0
 544:	0052      	lsls	r2, r2, #1
 546:	58a1      	ldr	r1, [r4, r2]
 548:	6043      	str	r3, [r0, #4]
 54a:	6001      	str	r1, [r0, #0]
 54c:	50a0      	str	r0, [r4, r2]
 54e:	3240      	adds	r2, #64	; 0x40
 550:	5083      	str	r3, [r0, r2]
 552:	3204      	adds	r2, #4
 554:	5083      	str	r3, [r0, r2]
 556:	3301      	adds	r3, #1
 558:	9301      	str	r3, [sp, #4]
 55a:	2300      	movs	r3, #0
 55c:	2e00      	cmp	r6, #0
 55e:	d0d6      	beq.n	50e <__register_exitproc+0x3a>
 560:	009a      	lsls	r2, r3, #2
 562:	4692      	mov	sl, r2
 564:	4482      	add	sl, r0
 566:	464a      	mov	r2, r9
 568:	2188      	movs	r1, #136	; 0x88
 56a:	4654      	mov	r4, sl
 56c:	5062      	str	r2, [r4, r1]
 56e:	22c4      	movs	r2, #196	; 0xc4
 570:	0052      	lsls	r2, r2, #1
 572:	4691      	mov	r9, r2
 574:	4481      	add	r9, r0
 576:	464a      	mov	r2, r9
 578:	3987      	subs	r1, #135	; 0x87
 57a:	4099      	lsls	r1, r3
 57c:	6812      	ldr	r2, [r2, #0]
 57e:	468b      	mov	fp, r1
 580:	430a      	orrs	r2, r1
 582:	4694      	mov	ip, r2
 584:	464a      	mov	r2, r9
 586:	4661      	mov	r1, ip
 588:	6011      	str	r1, [r2, #0]
 58a:	2284      	movs	r2, #132	; 0x84
 58c:	4641      	mov	r1, r8
 58e:	0052      	lsls	r2, r2, #1
 590:	50a1      	str	r1, [r4, r2]
 592:	2e02      	cmp	r6, #2
 594:	d1bb      	bne.n	50e <__register_exitproc+0x3a>
 596:	0002      	movs	r2, r0
 598:	465c      	mov	r4, fp
 59a:	328d      	adds	r2, #141	; 0x8d
 59c:	32ff      	adds	r2, #255	; 0xff
 59e:	6811      	ldr	r1, [r2, #0]
 5a0:	430c      	orrs	r4, r1
 5a2:	6014      	str	r4, [r2, #0]
 5a4:	e7b3      	b.n	50e <__register_exitproc+0x3a>
 5a6:	0020      	movs	r0, r4
 5a8:	304d      	adds	r0, #77	; 0x4d
 5aa:	30ff      	adds	r0, #255	; 0xff
 5ac:	50e0      	str	r0, [r4, r3]
 5ae:	e7a7      	b.n	500 <__register_exitproc+0x2c>
 5b0:	6828      	ldr	r0, [r5, #0]
 5b2:	f7ff ff8d 	bl	4d0 <__retarget_lock_release_recursive>
 5b6:	2001      	movs	r0, #1
 5b8:	4240      	negs	r0, r0
 5ba:	e7b1      	b.n	520 <__register_exitproc+0x4c>
 5bc:	20000428 	.word	0x20000428
 5c0:	000005c8 	.word	0x000005c8
 5c4:	00000000 	.word	0x00000000

000005c8 <_global_impure_ptr>:
 5c8:	20000000                                ... 

000005cc <_init>:
 5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ce:	46c0      	nop			; (mov r8, r8)
 5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5d2:	bc08      	pop	{r3}
 5d4:	469e      	mov	lr, r3
 5d6:	4770      	bx	lr

000005d8 <__init_array_start>:
 5d8:	00000471 	.word	0x00000471

000005dc <__frame_dummy_init_array_entry>:
 5dc:	000000dd                                ....

000005e0 <_fini>:
 5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5e2:	46c0      	nop			; (mov r8, r8)
 5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5e6:	bc08      	pop	{r3}
 5e8:	469e      	mov	lr, r3
 5ea:	4770      	bx	lr

000005ec <__fini_array_start>:
 5ec:	000000b5 	.word	0x000000b5
